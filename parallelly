#!/bin/sh

# TODO mark each global variable
# TODO are there local variables in POSIX shellscripts?

############## Shell flags
# Exit on error, undeclared variable reference, and set pipeline exit code
# to that of failing command.
set -eu

# Enable for debugging:
DEBUG="${DEBUG-false}"
TRACE="${TRACE-false}"

if [ "$TRACE" = true ]; then
  set -x
fi

show_debug_info() {
  debug "PPID=$PPID"
  if command -v ps > /dev/null; then
    debug "Parent process name: $(ps -p $PPID -o comm=)"
  fi
  debug "Is a TTY: $IS_A_TTY"
  debug "Colors supported: $COLORS_SUPPORTED"
}

############## Constants
SCRIPT_NAME="parallelly"
VERSION=1.9.3
NO_CMD_SHELL_INDICATOR=RAW
SUCCESSFUL_MARKER="____PARALLELLY_SUCCESSFUL____"
FAILED_MARKER="____PARALLELLY_FAILED____"
# For some reason, plain "\n" doesn't work with test
NEWLINE="$(printf "\n")"

COLORS_SUPPORTED="$(tput colors 2>/dev/null || echo 0)"
if [ -t 1 ]; then
  IS_A_TTY=true
else
  IS_A_TTY=false
fi

############## Exit codes

## Startup error
NO_TMP_DIRECTORY_EXIT_CODE=55

# Remember to update this variable!
EXIT_CODE_MIN="$NO_TMP_DIRECTORY_EXIT_CODE"

## Not enough arguments
NOT_ENOUGH_ARGUMENTS_EXIT_CODE=72
NO_NAMECOMMANDPAIRSS_EXIT_CODE=71
NO_ARGUMENTS_EXIT_CODE=73

## Unsupported option syntax
LONG_OPTION_WITH_EQUALS_EXIT_CODE=77
COMPOUND_SHORT_OPTION_EXIT_CODE=78
MORE_THAN_TWO_OPTION_DASHES_EXIT_CODE=79

## Valid syntax but unknown options
UNKNOWN_LONG_OPTION_EXIT_CODE=81
UNKNOWN_SHORT_OPTION_EXIT_CODE=82

## Semantic errors
MISSING_OPTARG_EXIT_CODE=85
REPEATED_NAME_EXIT_CODE=86
# Please skip 88

## Dependencies not found or not executable
CONFIGURABLE_COMMAND_NOT_EXECUTABLE_EXIT_CODE=90
REQUIRED_COMMAND_NOT_FOUND_EXIT_CODE=99

# Remember to update this variable!
EXIT_CODE_MAX="$REQUIRED_COMMAND_NOT_FOUND_EXIT_CODE"

## An expected failure mode
COMMANDS_FAILED_EXIT_CODE=22

############## Utility functions

require_command() {
  if ! command -v "$1" > /dev/null; then
    echo ERROR: The \'"$1"\' command is required to run this script "$@"
    exit "$REQUIRED_COMMAND_NOT_FOUND_EXIT_CODE"
  fi
}

############## Constants, but they might become configurable
DEFAULT_CMD_SHELL="sh"
DEFAULT_CMD_SHELL_ARGS="-c"
SHOW_CMD_OUTPUT_CMD_DEFAULT="tail"
SHOW_CMD_OUTPUT_CMD_ARGS_DEFAULT="-n1"
NO_OUTPUT_INDICATOR="(no output)"
NO_EOF_NEWLINE_INDICATOR="(no newline at end of output)"

############## Configurable environment variables.
# These should be in the same order as the argument parser and the documentation
if [ -n "${VERBOSE-}" ]; then
  PARALLELLY_VERBOSE_OUTPUT="$VERBOSE"
fi
PARALLELLY_VERBOSE_OUTPUT="${PARALLELLY_VERBOSE_OUTPUT-false}"

if [ -n "${ALL_OUTPUT-}" ]; then
  PARALLELLY_SHOW_ALL_OUTPUT="$ALL_OUTPUT"
fi
PARALLELLY_SHOW_ALL_OUTPUT="${PARALLELLY_SHOW_ALL_OUTPUT-$PARALLELLY_VERBOSE_OUTPUT}"

# If output is not a tty or DISPLAY is unset
# don't show emoji
if ! [ "$IS_A_TTY" = true ] || [ -z "${DISPLAY-}" ]; then
  PARALLELLY_EMOJI_OUTPUT="${PARALLELLY_EMOJI_OUTPUT-false}"
fi
PARALLELLY_EMOJI_OUTPUT="${PARALLELLY_EMOJI_OUTPUT-true}"

FORCE_SEQUENTIAL="${FORCE_SEQUENTIAL-false}"

# If output is not a tty or the terminal supports less than 8 colors or tput not installed
# disable colors
if ( ! command -v tput > /dev/null ) || ( ! [ "$IS_A_TTY" = true ] ) || [ "$COLORS_SUPPORTED" -lt 8 ]; then
  ENABLE_COLORS="${ENABLE_COLORS-false}"
fi
ENABLE_COLORS="${ENABLE_COLORS-true}"

LIGHT_MODE="${LIGHT_MODE-false}"

CMD_SHELL="${CMD_SHELL-$DEFAULT_CMD_SHELL}"
CMD_SHELL_ARGS="${CMD_SHELL_ARGS-${DEFAULT_CMD_SHELL_ARGS}}"

SHOW_CMD_OUTPUT_CMD_ARGS="${SHOW_CMD_OUTPUT_CMD_ARGS-$SHOW_CMD_OUTPUT_CMD_ARGS_DEFAULT}"
SHOW_CMD_OUTPUT_CMD="${SHOW_CMD_OUTPUT_CMD-$SHOW_CMD_OUTPUT_CMD_DEFAULT}"

# PARALLELLY_TMP_DIR requires complex initialization and that is done after
# creating the logging/error functions
MK_TEMP="${MK_TEMP-mktemp}"
# --directory doesn't work on MacOS
MK_TEMP_ARGS="${MK_TEMP_ARGS--d}"

SHOW_LINE_COUNT="${SHOW_LINE_COUNT-true}"
SHOW_BYTE_COUNT="${SHOW_BYTE_COUNT-true}"
HUMAN_READABLE_BYTE_COUNT="${HUMAN_READABLE_BYTE_COUNT-true}"

# If $DISPLAY is not set
# use CLI to notify about commands finishing
if [ -z "${DISPLAY-}" ]; then
  CLI_NOTIFY="${CLI_NOTIFY-true}"
fi
CLI_NOTIFY="${CLI_NOTIFY-false}"


if [ -z "${NOTIFY_COMMAND-}" ]; then
  if [ "$CLI_NOTIFY" = true ]; then
    NOTIFY_COMMAND="echo"
  else
    NOTIFY_COMMAND="notify-send"
  fi
fi
NOTIFY_COMMAND_ARGS="${NOTIFY_COMMAND_ARGS-}"

if [ -z "${FAILURE_NOTIFY_COMMAND-}" ]; then
  if [ "$CLI_NOTIFY" = true ]; then
    FAILURE_NOTIFY_COMMAND="echo" 
    FAILURE_NOTIFY_COMMAND_ARGS="${FAILURE_NOTIFY_COMMAND_ARGS-}"
  else
    FAILURE_NOTIFY_COMMAND="notify-send"
    FAILURE_NOTIFY_COMMAND_ARGS="${FAILURE_NOTIFY_COMMAND_ARGS---urgency=critical}"
  fi
fi

SHOW_CONFIGURATION="${SHOW_CONFIGURATION-false}" 
SHOW_PIDS="${SHOW_PIDS-false}" 

############## Functions to help generate output
BLUE=4
RED=1
UNDEREMPH=UNDEREMPH
GREY=7
YELLOW=3
NONE=NONE
color() {
  if [ "$ENABLE_COLORS" = true ]; then
    if [ "$1" = "$UNDEREMPH" ]; then
      if [ "$LIGHT_MODE" = true ]; then
        tput setaf "$YELLOW"
      else
        tput setaf "$GREY"
      fi
    elif [ "$1" = "$NONE" ]; then
      # Turn off all attributes
      tput sgr0
    else
      tput setaf "$1"
    fi
  fi
}

emoji() {
  if [ "$PARALLELLY_EMOJI_OUTPUT" != true ]; then
    return 0
  fi

  trailer=' '
  if [ "${2-}" = nospace ]; then
    trailer=
  fi
  character=
  case "$1" in
    checkmark) character='✅' ;;
    error) character='❌' ;;
    rocket) character='🚀' ;;
  esac
  if [ -z "$character" ]; then
    error Unknown emoji "$1"
  fi
  printf "%s%s" "$character" "$trailer"
}

log() {
  echo "$@"
}

log_color() {
  color "$1"
  shift
  log "$@"
  color "$NONE"
}

verbose() {
  if [ "${FORCE_LOG-false}" = true ] || [ "$PARALLELLY_VERBOSE_OUTPUT" = true ] ; then
    log_color "$BLUE" "$@"
  fi
}

debug() {
  if [ "${DEBUG-}" = true ]; then
    echo DEBUG: "$@"
  fi
}

section_str() {
  color 3
  color 1
  log '=============' "$@" '============='
  color "$NONE"
}

section() {
  log "$(section_str "$@")"
}

verbose_section() {
  verbose "$(section_str "$@")"
}

# Logs to stderr
error_section() {
  color "$RED"
  section "$@" >&2
  color "$NONE"
}

# Logs to stderr
error() {
  log_color "$RED" "$(emoji error)ERROR" "$@" >&2
}

time_in_sec() {
  date +%s.%N
}

format_time() {
  local TIME="$(cat)"
  if ( echo "$TIME" | grep '\.' ) > /dev/null; then
    # Only 4 digits
    TIME="$(printf '%.04f' "$TIME")"
  fi
  echo "$TIME"
}

float_to_int() {
  echo "$1" | cut -d\. -f1
}

noun() {
  if [ "$1" = 1 ]; then
    echo "$2"
  else
    echo "$2"s
  fi
}

bytes_to_human_readable() {
    local integer=${1:-0} decimal="" iterations=1
    local byte_names="byte KiB MiB GiB TiB PiB EiB YiB ZiB"
    local byte_names_count="$(echo "$byte_names" | wc -w)"
    while [ "$integer" -gt 1023 ] && [ "$iterations" -lt "$byte_names_count" ]; do
      decimal="$(printf ".%02d" $((integer % 1024 * 100 / 1024)))"
      integer=$((integer / 1024))
      iterations=$((iterations + 1))
    done
    if [ "$decimal" = ".00" ]; then
      decimal=""
    fi
    float="$integer$decimal"
    if command -v cut > /dev/null; then
      byte_name="$(echo "$byte_names" | cut -d' ' -f"$iterations")"
      byte_name=" $(noun "$float" "$byte_name")"
    else
      byte_name=""
    fi
    echo "$float$byte_name"
}

# TODO add unit tests
# bytes_to_human_readable 1
# bytes_to_human_readable 1024
# bytes_to_human_readable 1000
# bytes_to_human_readable 10240
# bytes_to_human_readable $((1024 * 1024 + 1024 * 1024 / 10))
# bytes_to_human_readable 1025
# bytes_to_human_readable 1121551421
# bytes_to_human_readable 11215514210000000

############## Initialize a base tmp directory.
# This code must run before parsing the name/command arguments because the tmp dir
# is used to store commands, as we cannot use bash arrays to store arguments
# that may contain whitespace and have no hash maps to relate a name to its
# command
#
# The script can run if only given arguments like --help or --show-configuration

make_fallback_tmp_directory() {
  log "Trying fallback: $1"
  local TEST_FILE="$1/parallelly-tmp-test-$(whoami)"
  if touch "$TEST_FILE"; then
    PARALLELLY_TMP_DIR="$1"
  else
    error "Unable to touch file in $1: $TEST_FILE"
    return 1
  fi
}

set_or_make_base_tmp_directory() {
  if [ -z "${PARALLELLY_TMP_DIR-}" ]; then
    debug "Creating a tmp directory"
    require_command "$MK_TEMP" "or set \$PARALLELLY_TMP_DIR"
    PARALLELLY_TMP_DIR="$("$MK_TEMP" "$MK_TEMP_ARGS" || true)"
    if [ -z "${PARALLELLY_TMP_DIR-}" ]; then
      log "Parallelly requires a tmp dir to parse its arguments."
      error "Unable to make a directory with $MK_TEMP $MK_TEMP_ARGS"
      log "Please set \$PARALLELLY_TMP_DIR"
      log "Will try to use a common base directory for temporary files"
      make_fallback_tmp_directory /tmp || make_fallback_tmp_directory $HOME/tmp || \
        ( error "Unable to make a tmp directory. Please set \$PARALLELLY_TMP_DIR". ; \
          exit "$NO_TMP_DIRECTORY_EXIT_CODE"
        )
    fi
  fi
}

############## Help
help() {
  # I tried changing this to one large multi-line string, but it messes with
  # my editor's syntax highlighting and I can't move the function to the end
  # of the file without more complicated code.
  echo "Description:"
  echo "    Run commands in parallel and capture output. Notify on each completion."
  echo
  echo "    - Notify if a command succeeds (status code 0) or fails (non-zero status code)."
  echo "    - Save command outputs to a temporary directory."
  echo "    - Print command output if the command fails."
  echo "    - (Optional) Print command output if the command succeeds."
  echo "    - Print line count of command output."
  echo "    - Measures total runtime."
  echo "    - Measures runtime of each command."
  echo
  echo "    See examples in section below."
  echo
  echo "USAGE:"
  echo "    $SCRIPT_NAME -h|--help|-v|--version|<other options> [cmd_name cmd_with_arguments]+"
  echo
  echo "    One or more pairs of cmd_name followed by cmd_with_arguments are expected."
  echo
  echo "    cmd_name             A short and filesafe name for the following command."
  echo "                         Used in notifications and files storing output."
  echo "                         A cmd_with_arguments should always follow these args."
  echo "    cmd_with_arguments   An escaped command to run in parallel"
  echo
  echo "    -h|--help            Print this message."
  echo "    -v|--version         Print version of this script."
  echo
  echo "Configuration:"
  echo "  Options take priority over environment variables."
  echo "  Options can go in between a name and its command."
  echo "  Use --show-configuration or --verbose to see configuration."
  echo
  echo "  Output configuration:"
  echo "    --verbose|-V|--no-verbose or set \$PARALLELLY_VERBOSE_OUTPUT=true:"
  echo "        Whether to print verbose logs."
  printf '%s' \
       "        If colors are enabled, logs are "
  log_color "$BLUE" "colored."
  echo "        Default: false or value of \$VERBOSE if it is set"
  echo "    --all-output|-a|--not-all-output or set \$PARALLELLY_SHOW_ALL_OUTPUT=true:"
  echo "        Whether to print command output for successful commands too."
  echo "        Default: false or value of \$ALL_OUTPUT if it is set"
  echo "    --emoji|-e|--no-emoji|-z or set \$PARALLELLY_EMOJI_OUTPUT=true:"
  echo "        Whether to print emoji."
  echo "        Use --no-emoji if you see tofu characters (empty boxes), such as"
  printf \
       "        '\ue000' '\uf8ff' '\ufffd' '%s'\n" "�"
  echo "        Default: true if output is a tty and \$DISPLAY is set, false otherwise."
  echo "    --color|-c|--no-color|-n or set \$ENABLE_COLORS=true: "
  printf '%s' \
       "        If enabled, errors are "
  log_color "$RED" "colored."
  printf '%s' \
       "        If enabled, verbose logs are "
  log_color "$BLUE" "colored."
  printf '%s' \
       "        If enabled, some other logs are "
  log_color "$UNDEREMPH" "underemphasized."
  echo "          This color may not show up well on a light background."
  echo "          Use --light-mode in this case."
  echo "        Default: true only if"
  echo "            - output is a tty and tput colors>=8, false otherwise."
  echo "            - tput is installed"
  echo "            - tput colors>=8"
  echo "          tput colors = $COLORS_SUPPORTED"
  echo "          is a tty = $([ "$IS_A_TTY" = true ] && echo yes || echo no)"
  echo "    --light-mode|--no-light-mode or set \$LIGHT_MODE=true: "
  echo "    --command-output-command|--cc or set \$SHOW_CMD_OUTPUT_CMD:"
  echo "        Command for printing stderr and stdout of a command"
  echo "        If this argument is passed, --cc-args is set to '' by default."
  echo "        Make sure to pass --cc-args AFTER this argument."
  echo "        Default: $SHOW_CMD_OUTPUT_CMD_DEFAULT"
  echo "    --command-output-command-args|--cc-args or set \$SHOW_CMD_OUTPUT_CMD_ARGS:"
  echo "        Arguments for command for printing stderr and stdout of a command"
  echo "        Default: $SHOW_CMD_OUTPUT_CMD_ARGS_DEFAULT"
  echo "    --tmp-dir or set \$PARALLELLY_TMP_DIR:"
  echo "        If you don't have $MK_TEMP on your system, you must set this"
  echo "        option with the environment variable!"
  echo "        Note: $SCRIPT_NAME usually needs a tmp directory to parse its arguments!"
  echo "        Alternative: set \$MK_TEMP and \$MK_TEMP_ARGS"
  echo "        Default: created using $MK_TEMP"
  echo "    --line-count|--no-line-count or set \$SHOW_LINE_COUNT:"
  echo "        Whether to show line count."
  echo "        Default: true"
  echo "    --byte-count|--no-byte-count or set \$SHOW_BYTE_COUNT:"
  echo "        Whether to show byte count."
  echo "        Default: true"
  echo "    --human-readable-byte-count|-H|--raw-byte-count or set \$HUMAN_READABLE_BYTE_COUNT:"
  echo "        Whether to show byte count in binary prefixes, such as 10MiB."
  echo "  Running commands configuration:"
  echo "    --sequential|-s|--no-sequential or set \$FORCE_SEQUENTIAL=true:"
  echo "        Run commands sequentially instead of in parallel."
  echo "        Useful if you just want to capture output and get notifications."
  echo "        Default: false"
  echo "    --shell-command or set \$CMD_SHELL:"
  echo "        Which shell to run the commands in."
  echo "        Special value: $NO_CMD_SHELL_INDICATOR."
  echo "          Run the commands directly, without using a shell."
  echo "          Does not work on ZSH."
  echo "          Use only if you know what you're doing."
  echo "        Default: $DEFAULT_CMD_SHELL"
  echo "    --shell-command-args or set \$CMD_SHELL_ARGS:"
  echo "        Arguments to pass to the shell"
  echo "        Default: $DEFAULT_CMD_SHELL_ARGS"
  echo "  Notifications configuration:"
  echo "    --notify-command or set \$NOTIFY_COMMAND:"
  echo "        Command to notify when a command succeeds."
  echo "        Should take two arguments, each possibly containing spaces."
  echo "        First argument is title, second is a description."
  echo "        Default: echo if \$CLI_NOTIFY is false, GUI command otherwise."
  echo "    --failure-notify-command or set \$FAILURE_NOTIFY_COMMAND:"
  echo "        Command to notify when a command fails."
  echo "        Should take two arguments, each possibly containing spaces."
  echo "        First argument is title, second is a description."
  echo "        Default: echo if \$CLI_NOTIFY is false, more visible GUI command otherwise."
  echo "    --notify-command-args or set \$NOTIFY_COMMAND_ARGS"
  echo "    --failure-notify-command-args or set \$FAILURE_NOTIFY_COMMAND_ARGS"
  echo
  echo "  Debug only:"
  echo "    --show-configuration or set \$SHOW_CONFIGURATION=true:"
  echo "        Print configuration."
  echo "    --show-pids or set \$SHOW_PIDS=true:"
  echo "        Print process IDs of background jobs."
  echo "        Incompatible with --sequential."
  echo "    --debug or set \$DEBUG=true"
  echo "    --trace or set \$TRACE=true:"
  echo "        Run 'set -x'"
  echo
  echo "Exit codes:"
  echo "    Exit code 0 is success."
  echo "    Exit code $COMMANDS_FAILED_EXIT_CODE indicates some or all commands failed."
  echo "    Other exit codes range from $EXIT_CODE_MIN to $EXIT_CODE_MAX."
  echo "    See source code for an enumeration of all possible exit codes."
  echo
  echo "Examples:"
  echo
  echo "  A command without arguments:"
  echo "    $SCRIPT_NAME list-files ls"
  echo
  echo "  Verbose output and a command without arguments:"
  echo "    $SCRIPT_NAME -V list-files ls"
  echo "    $SCRIPT_NAME list-files ls -V"
  echo "    $SCRIPT_NAME list-files -V ls"
  echo "    VERBOSE=true $SCRIPT_NAME list-files ls"
  echo "    PARALLELLY_VERBOSE_OUTPUT=true $SCRIPT_NAME list-files ls"
  echo
  echo "  A command with arguments:"
  echo "    $SCRIPT_NAME rsync-src 'rsync -rhP src backup'"
  echo
  echo "  A command with arguments that have spaces in them:"
  echo "    $SCRIPT_NAME printf-abc 'printf \"%s %s\" abc 123'"
  echo
  echo "  Show more or all command output"
  echo "    $SCRIPT_NAME multi-line-output --all-output --cc-args '-n5' 'echo 1; echo 2; echo 3; printf \"%s %s\" abc 123'"
  echo "    $SCRIPT_NAME multi-line-output --all-output --cc cat --cc-args '' 'echo 1; echo 2; echo 3; printf \"%s %s\" abc 123'"
  echo
  echo "  Shell commands:"
  echo "    $SCRIPT_NAME test-exit 'echo failure && exit 1'"
  echo "    $SCRIPT_NAME test-statement 'if true; then echo 1; fi'"
  echo
  echo "    Commands are run in the $DEFAULT_CMD_SHELL by default shell with: $CMD_SHELL $CMD_SHELL_ARGS \"\$COMMAND\""
  echo
  echo "  Commands are waited one at a time in order:"
  echo "    This means that you should list the fast commands first."
  echo "    VERBOSE=true $SCRIPT_NAME 1 'sleep 0.1' 2 'sleep 1' 3 'sleep 2'"
  echo
  echo "    Or else, it'll take a bit longer to see successful outputs."
  echo "    VERBOSE=true $SCRIPT_NAME 3 'sleep 2' 2 'sleep 1' 1 'sleep 0.1'"
  echo
  echo "    Regardless, you are notified as soon as a command finishes."
  echo "    VERBOSE=true CLI_NOTIFY=true parallelly 3 'sleep 2' 2 'sleep 1' 1 'sleep 0.1'"
  echo
  echo "  Multiple commands:"
  echo "    $SCRIPT_NAME fail 'echo failure && exit 1' \\"
  echo "      fail-printf-nonewline 'printf \"%s %s\"\\ abc 123 ; false' \\"
  echo "      fail-rsync-src 'rsync -rhP nonexistentdir backup' \\"
  echo "      delay 'sleep 0.2' \\"
  echo "      ok-and-output 'echo test ; echo stderr test >&2' \\"
  echo "      fail-slower-delay '! sleep 0.4' \\"
  echo "      fail-no-output 'exit 210' \\"
  echo "      lots-of-output 'cat \$(which parallelly)' \\"
  echo "      'long name for command with spaces' 'true && echo ok'"
  echo
  echo "    The odd numbered arguments are short, filesafe names for each command." 
  echo "    The names are used in notifications and files storing outout."
  echo
  echo "Add synchronized swimming to your CLI!"
  echo "Version: $VERSION"
}

############## Main functions

run_cmd() {
  # Run a command in background and save its stderr and stdout to files
  NAME="$1"
  COMMAND="$2"
  STDERR_FILE="$CMD_OUT_DIR/$NAME.stderr"
  STDOUT_FILE="$CMD_OUT_DIR/$NAME.stdout"
  TIME_FILE="$CMD_OUT_DIR/$NAME.time"

  verbose "Starting $NAME command $CURRENT_CMD/$NUM_CMDS"
  if [ "$CMD_SHELL" = $NO_CMD_SHELL_INDICATOR ]; then
    verbose "Running without a shell"
    verbose + "$COMMAND"
  else
    verbose + "$CMD_SHELL" "$CMD_SHELL_ARGS" "$COMMAND"
  fi
  verbose "See output at:"
  verbose "$STDERR_FILE"
  verbose "$STDOUT_FILE"

  __run_cmd() {
    local NAME="$1"
    local COMMAND="$2"

    if [ "$CMD_SHELL" = $NO_CMD_SHELL_INDICATOR ]; then
      $COMMAND
    else
      $CMD_SHELL $CMD_SHELL_ARGS "$COMMAND"
    fi
  }

  __run_time_notify_capture_cmd() {
    local NAME="$1"
    local COMMAND="$2"
    local STDERR_FILE="$CMD_OUT_DIR/$NAME.stderr"
    local STDOUT_FILE="$CMD_OUT_DIR/$NAME.stdout"
    local TIME_FILE="$CMD_OUT_DIR/$NAME.time"

    local LOCAL_START_TIME="$(time_in_sec)"
    set +eu
    ( __run_cmd "$NAME" "$COMMAND" > "$STDOUT_FILE" 2> "$STDERR_FILE" )


    local STATUS_CODE="$?"
    local RUNTIME="$(echo "$(time_in_sec)" "$LOCAL_START_TIME" | awk '{print $1 - $2}' | format_time || echo "UNKNOWN")"
    echo "$RUNTIME" > "$TIME_FILE"

    if [ "$STATUS_CODE" = 0 ]; then
      $NOTIFY_COMMAND $NOTIFY_COMMAND_ARGS "parallelly: $NAME command finished in ${RUNTIME}sec." "$COMMAND" || true
    else
      $FAILURE_NOTIFY_COMMAND $FAILURE_NOTIFY_COMMAND_ARGS "parallelly: ERROR $NAME command after ${RUNTIME}sec." "$COMMAND"
    fi
    return "$STATUS_CODE"
  }

  # Run command and then run notify command.
  # If either notify command fails, do not count the command as a failed command

  if ! [ "$FORCE_SEQUENTIAL" = true ]; then
    __run_time_notify_capture_cmd "$NAME" "$COMMAND" &
    PID="$!"
    if [ "$SHOW_PIDS" = true ]; then
      log "PID=$PID for command $NAME"
    fi
  else
    log "FORCE_SEQUENTIAL is set: Waiting for command $NAME to finish"
    if __run_time_notify_capture_cmd "$NAME" "$COMMAND"; then
      PID="$SUCCESSFUL_MARKER$CURRENT_CMD"
    else
      PID="$FAILED_MARKER$CURRENT_CMD"
    fi
  fi

  pids="$pids $PID"
  PID_FILE="$CMD_OUT_DIR/$PID"
  echo "$NAME" > "$PID_FILE"
}

############## Dependency checks

require_command wc
require_command cut
require_command grep
require_command mkdir
require_command rm
require_command cat
require_command echo
require_command printf

############## main()

show_debug_info

############## Other variables
CURRENT_CMD=0

# The presence of some arguments indicates that the program can exit
# with status code 0 even if there are no name/command pairs.
OK_IF_NO_PAIRS=false

# Stores array of PIDs of commands that were started
# Due to POSIX compatibility, we can't use arrays.
pids=""

############## Parse arguments

validate_option_argument() {
  debug "arglog: Validating executable optarg: \"$ARGUMENT\""
  if [ -z "$ARGUMENT" ]; then
    error Option "$OPTION" expected argument
    exit "$MISSING_OPTARG_EXIT_CODE"
  fi
  PARSED_ARGUMENT=true
}

OPTION=
ARGUMENT=
parse_option() {
  # Parse an individual option.
  # It can either set a variable, cause the program to exit,
  # or set the current name or command, which must come in pairs.
  OPTION="$1"
  ARGUMENT="${2-}"
  debug "arglog: Option=\"$OPTION\""
  case "$OPTION" in
    --help | -h)
      help
      exit 0
      ;;
    --version | -v) 
      log "$VERSION"
      exit 0
      ;;
    --verbose | -V) PARALLELLY_VERBOSE_OUTPUT=true ;;
    --no-verbose) PARALLELLY_VERBOSE_OUTPUT=false ;;
    --all-output | -a) PARALLELLY_SHOW_ALL_OUTPUT=true ;;
    --not-all-output) PARALLELLY_SHOW_ALL_OUTPUT=false ;;
    --emoji | -e) PARALLELLY_EMOJI_OUTPUT=true ;;
    --no-emoji | -z) PARALLELLY_EMOJI_OUTPUT=false ;;
    --color | -c) ENABLE_COLORS=true ;;
    --no-color | -n) ENABLE_COLORS=false ;;
    --light-mode) LIGHT_MODE=true ;;
    --no-light-mode) LIGHT_MODE=false ;;
    --command-output-command | --cc) validate_option_argument "$ARGUMENT" ; SHOW_CMD_OUTPUT_CMD_ARGS='' ; SHOW_CMD_OUTPUT_CMD="$ARGUMENT" ;;
    --command-output-command-args | --cc-args) PARSED_ARGUMENT=true ; SHOW_CMD_OUTPUT_CMD_ARGS="$ARGUMENT" ;;
    --tmp-dir) PARSED_ARGUMENT=true ; PARALLELLY_TMP_DIR="$ARGUMENT" ;;
    --line-count) SHOW_LINE_COUNT=true ;;
    --no-line-count) SHOW_LINE_COUNT=false ;;
    --byte-count) SHOW_BYTE_COUNT=true ;;
    --no-byte-count) SHOW_BYTE_COUNT=false ;;
    --human-readable-byte-count|-H) SHOW_BYTE_COUNT=true ; HUMAN_READABLE_BYTE_COUNT=true ;;
    --raw-byte-count) SHOW_BYTE_COUNT=true ; HUMAN_READABLE_BYTE_COUNT=false ;;
    --sequential | -s) FORCE_SEQUENTIAL=true ;;
    --no-sequential) FORCE_SEQUENTIAL=false ;;
    --shell-command) validate_option_argument "$ARGUMENT" ; CMD_SHELL="$ARGUMENT" ;;
    --shell-command-args) PARSED_ARGUMENT=true ; CMD_SHELL_ARGS="$ARGUMENT" ;;
    --notify-command) validate_option_argument "$ARGUMENT" ; NOTIFY_COMMAND="$ARGUMENT" ;;
    --failure-notify-command) validate_option_argument "$ARGUMENT" ; FAILURE_NOTIFY_COMMAND="$ARGUMENT" ;;
    --notify-command-args) PARSED_ARGUMENT=true ; NOTIFY_COMMAND_ARGS="$ARGUMENT" ;;
    --failure-notify-command-args) PARSED_ARGUMENT=true ; FAILURE_NOTIFY_COMMAND_ARGS="$ARGUMENT" ;;
    --show-configuration) SHOW_CONFIGURATION=true ; OK_IF_NO_PAIRS=true ;;
    --show-pids) SHOW_PIDS=true ;;
    --debug) DEBUG=true ; OK_IF_NO_PAIRS=true ;;
    --trace) TRACE=true ; OK_IF_NO_PAIRS=true ;;
    --*=*)
      error "Long options with argument set with = are not allowed: given $OPTION"
      log "Use --option argument instead of --option=argument"
      exit "$LONG_OPTION_WITH_EQUALS_EXIT_CODE"
      ;;
    ---*)
      error "More than two dashes detected in option $OPTION"
      exit "$MORE_THAN_TWO_OPTION_DASHES_EXIT_CODE"
      ;;
    --*)
      error Unrecognized option "$OPTION"
      exit "$UNKNOWN_LONG_OPTION_EXIT_CODE"
      ;;
    -*)
      if [ "$(echo "$OPTION" | wc -c)" -gt 3 ]; then
        error Compound short options are not allowed: given "$OPTION"
        log "Use -a -b instead of -ab"
        exit "$COMPOUND_SHORT_OPTION_EXIT_CODE"
      else
        error Unrecognized option "$OPTION"
        exit "$UNKNOWN_SHORT_OPTION_EXIT_CODE"
      fi
      ;;
    # Indicate option is a name or command
    *) 
      if [ "$EXPECTING_ARG" = name ]; then
        # Rare case: name contains newline.
        # I had trouble detecting this condition..
        CURRENT_NAME="$OPTION"
      elif [ "$EXPECTING_ARG" = command ]; then
        CURRENT_COMMAND="$OPTION"
      fi
      return 1 ;;
  esac
  return 0
}

############## Parse command line arguments
if [ "$#" = 0 ]; then
  help
  error No arguments given.
  exit "$NO_ARGUMENTS_EXIT_CODE"
fi

# Used to handle the --tmp-dir argument
make_cmd_out_dir() {
  # Try to have a human readable suffix in the directory name
  if [ "${TMP_DIR_SUFFIX-__UNINITIALIZED__}" = __UNINITIALIZED__ ]; then
    if command -v whoami > /dev/null && command -v date > /dev/null; then
      TMP_DIR_SUFFIX="-$(whoami)-$(date +%Y-%m-%d)"
    else
      error whomai or date not installed
      TMP_DIR_SUFFIX=
    fi
  else
    debug "Using existing TMP_DIR_SUFFIX=$TMP_DIR_SUFFIX"
  fi

  CMD_OUT_DIR="$PARALLELLY_TMP_DIR/$SCRIPT_NAME-logs$TMP_DIR_SUFFIX"

  # Erase any existing files
  # Useful when using a fixed base directory like /home/tmp
  if [ -d "$CMD_OUT_DIR" ]; then
    debug WARNING Temporary directory exists. Deleting "$CMD_OUT_DIR"
    rm -rf "$CMD_OUT_DIR"
  fi

  # These are used in case the --tmp-dir argument is passed
  ORIGINAL_CMD_OUT_DIR="$CMD_OUT_DIR"
  ORIGINAL_TMP_DIR="$PARALLELLY_TMP_DIR"

  # Create directory
  mkdir -p "$CMD_OUT_DIR"
}

move_old_cmd_out_dir() {
  if [ -n "${ORIGINAL_CMD_OUT_DIR-}" ]; then
    mv "$ORIGINAL_CMD_OUT_DIR/" "$CMD_OUT_DIR/"
  fi
}

# Make sure to move this file if passed the --tmp-dir argument!
NAMES_FILE="__UNINITIALIZED__"
debug "arglog: Will parse ($#) arguments:"
for arg in "$@"; do
  debug "arglog: Argument \"$arg\""
done
while [ "$#" -gt 0 ]; do
  # This code is complicated because we need to parse arbitrary options
  # among pairs of non-option arguments.
  CURRENT_NAME=
  CURRENT_COMMAND=
  PARSED_ARGUMENT=false 
  EXPECTING_ARG=name

  # Parse options and loop or parse the name/command and end loop
  # This code must be duplicated because functions do not have
  # access to the program's arguments, only their own
  while [ "$#" -gt 0 ] && parse_option "$1" "${2-}"; do
    shift
    if [ "$PARSED_ARGUMENT" = true ]; then
      debug "arglog: Option $OPTION argument $ARGUMENT was parsed"
      shift
    fi
    PARSED_ARGUMENT=false 
  done
  debug "arglog: Remaining ($#)" "$@"

  if [ -n "$CURRENT_NAME" ]; then
    shift
  else
    # All arguments were parsed successfully. End the loop.
    continue
  fi

  EXPECTING_ARG=command

  # Parse options and loop or parse the name/command and end loop
  # This code must be duplicated because functions do not have
  # access to the program's arguments, only their own
  while [ "$#" -gt 0 ] && parse_option "$1" "${2-}"; do
    shift
    if [ "$PARSED_ARGUMENT" = true ]; then
      debug "arglog: Option $OPTION argument $ARGUMENT was parsed"
      shift
    fi
    PARSED_ARGUMENT=false 
  done
  debug "arglog: Remaining ($#)" "$@"
  
  if [ -n "$CURRENT_COMMAND" ]; then
    shift
  else
    # Handle name without a command
    if [ "$#" = 0 ]; then
      error "Not enough arguments found! Please write the command for $CURRENT_NAME"
      log "Are your arguments containing spaces properly escaped?"
      exit "$NOT_ENOUGH_ARGUMENTS_EXIT_CODE"
    fi
  fi

  # Check for repeated names
  if ! [ -f "$NAMES_FILE" ]; then
    # Create tmp directory!
    set_or_make_base_tmp_directory
    make_cmd_out_dir
    verbose Created tmp directory at "$CMD_OUT_DIR"
    NAMES_FILE="$CMD_OUT_DIR/names"
  else
    if grep "^$CURRENT_NAME$" "$NAMES_FILE" 2>&1 > /dev/null; then
      error "Duplicate name $CURRENT_NAME detected. Please rename."
      exit "$REPEATED_NAME_EXIT_CODE"
    fi
  fi
  echo "$CURRENT_NAME" >> "$NAMES_FILE"

  # Save command so it can be accessed by command name.
  # Since we can't guarantee access to bash arrays, we don't have a way to
  # save commands that contain whitespace or nested strings properly.

  # Make sure to move this file if passed the --tmp-dir argument!
  COMMAND_FILE="$CMD_OUT_DIR/$CURRENT_NAME.command"
  echo "$CURRENT_COMMAND" > "$COMMAND_FILE"
done

############## Validate arguments and set variables that depend on arguments

if [ "$SHOW_PIDS" = true ] && [ "$FORCE_SEQUENTIAL" = true ]; then
  error "Will not show PIDs when --sequential is set"
fi

show_debug_info

if [ "$TRACE" = true ]; then
  set -x
fi

check_is_exec() {
  CMD_NAME="$1"
  CMD="$2"
  if ! command -v "$CMD" 2>&1 > /dev/null || [ -x "$CMD_NAME" ]; then
    error "Please change $CMD_NAME, \"$CMD\" is not executable."
    exit "$CONFIGURABLE_COMMAND_NOT_EXECUTABLE_EXIT_CODE"
  fi
}

check_is_exec SHOW_CMD_OUTPUT_CMD "$SHOW_CMD_OUTPUT_CMD"
check_is_exec NOTIFY_COMMAND "$NOTIFY_COMMAND"
check_is_exec FAILURE_NOTIFY_COMMAND "$FAILURE_NOTIFY_COMMAND"
if ! [ "$CMD_SHELL" = $NO_CMD_SHELL_INDICATOR ]; then
  check_is_exec CMD_SHELL "$CMD_SHELL"
fi

NEWLINE_AFTER_EVERY_ERROR=false
if [ "$PARALLELLY_VERBOSE_OUTPUT" = true ]; then
  NEWLINE_AFTER_EVERY_ERROR=true
fi

############## Print configuration

show_configuration() {
  section Configuration
  log "Environment variables may have been overridden by command line options."
  log
  log "PARALLELLY_VERBOSE_OUTPUT=$PARALLELLY_VERBOSE_OUTPUT"
  log "PARALLELLY_SHOW_ALL_OUTPUT=$PARALLELLY_SHOW_ALL_OUTPUT"
  log "PARALLELLY_EMOJI_OUTPUT=$PARALLELLY_EMOJI_OUTPUT"
  log "CMD_SHELL=$CMD_SHELL"
  log "CMD_SHELL_ARGS=$CMD_SHELL_ARGS"
  log "FORCE_SEQUENTIAL=$FORCE_SEQUENTIAL"
  log "SHOW_CMD_OUTPUT_CMD=$SHOW_CMD_OUTPUT_CMD"
  log "SHOW_CMD_OUTPUT_CMD_ARGS=$SHOW_CMD_OUTPUT_CMD_ARGS"
  log "PARALLELLY_TMP_DIR=${PARALLELLY_TMP_DIR-(unset! Haven\'t created a tmp dir yet)}"
  log "SHOW_LINE_COUNT=$SHOW_LINE_COUNT"
  log "SHOW_BYTE_COUNT=$SHOW_BYTE_COUNT"
  log "HUMAN_READABLE_BYTE_COUNT=$HUMAN_READABLE_BYTE_COUNT"
  log "NOTIFY_COMMAND=$NOTIFY_COMMAND"
  log "FAILURE_NOTIFY_COMMAND=$FAILURE_NOTIFY_COMMAND"
  log "NOTIFY_COMMAND_ARGS=$NOTIFY_COMMAND_ARGS"
  log "FAILURE_NOTIFY_COMMAND_ARGS=$FAILURE_NOTIFY_COMMAND_ARGS"
  log "ENABLE_COLORS=$ENABLE_COLORS"
  log "LIGHT_MODE=$LIGHT_MODE"
  log "SHOW_CONFIGURATION=$SHOW_CONFIGURATION"
  log "SHOW_PIDS=$SHOW_PIDS"
  log "Temporary directory CMD_OUT_DIR=${CMD_OUT_DIR-(unset!)}"
  log
}

if [ "$PARALLELLY_VERBOSE_OUTPUT" = true ] || [ "$SHOW_CONFIGURATION" = true ]; then
  show_configuration
fi

############## Exit if no pairs given

if ! [ -f "$NAMES_FILE" ]; then
  if [ "$OK_IF_NO_PAIRS" = true ]; then
    exit 0
  else
    error Expected one or more name+command pairs as arguments.
    exit "$NO_NAMECOMMANDPAIRSS_EXIT_CODE"
  fi
else
  NUM_CMDS="$(cat "$NAMES_FILE" | wc -l)"
fi

# Handle the --tmp-dir argument
if ! [ "$ORIGINAL_TMP_DIR" = "$PARALLELLY_TMP_DIR" ]; then
  make_cmd_out_dir
  move_old_cmd_out_dir
  COMMAND_FILE="$CMD_OUT_DIR/$CURRENT_NAME.command"
  NAMES_FILE="$CMD_OUT_DIR/names"
fi

############## Print message before running all commands

if [ "$FORCE_SEQUENTIAL" = true ]; then
  RUN_METHOD=sequentially
else
  RUN_METHOD='in parallel'
fi

log "$SCRIPT_NAME will run $NUM_CMDS commands $RUN_METHOD $(emoji rocket)"

############## Main loop

require_command date

# Iterate through all given command line arguments.
# Run each one as a command in parallel, saving its output to a tmp file.
START_TIME="$(time_in_sec)"
verbose_section Starting commands
while read NAME; do
  COMMAND_FILE="$CMD_OUT_DIR/$NAME.command"
  CURRENT_CMD="$(( CURRENT_CMD + 1))"
  run_cmd "$NAME" "$(cat "$COMMAND_FILE")"
done < "$NAMES_FILE"

verbose

############## Wait for commands and show results, especially from failed commands
line_count() {
  if ! [ "$SHOW_LINE_COUNT" = true ]; then
    printf ""
    return 0
  fi
  if ! [ -f "$1" ] && command -v wc > /dev/null; then
    echo "UNKNOWN line count"
  else
    __LINE_COUNT="$(cat "$1" 2>/dev/null | wc -l || echo 0)"
    echo "$__LINE_COUNT $(noun "$__LINE_COUNT" line)"
  fi
}

byte_count() {
  if ! [ "$SHOW_BYTE_COUNT" = true ]; then
    printf ""
    return 0
  fi
  if ! [ -f "$1" ] && command -v wc > /dev/null; then
    echo "UNKNOWN byte count"
  else
    __BYTE_COUNT="$(cat "$1" 2>/dev/null | wc -c || echo 0)"
    if [ "$HUMAN_READABLE_BYTE_COUNT" = true ]; then
      echo "$(bytes_to_human_readable "$__BYTE_COUNT")"
    else
      __BYTE_NAME=$(noun "$__BYTE_COUNT" byte)
      echo "$__BYTE_COUNT $__BYTE_NAME"
    fi
  fi
}

show_output() {
  # Print output of a command
  DISPOSITION="$1"
  OUTPUT_NAME="$2"
  NAME="$3"
  FILE="$4"
  LINE_COUNT="$(line_count "$FILE")"
  BYTE_COUNT="$(byte_count "$FILE")"
  printf "%s" "$(color "$BLUE")$OUTPUT_NAME$(color "$NONE") output for $DISPOSITION command $NAME:"
  if [ -z "$(cat "$FILE")" ]; then
    log_color "$UNDEREMPH" " $NO_OUTPUT_INDICATOR"
  else
    log " $BYTE_COUNT $LINE_COUNT"
    log + "$SHOW_CMD_OUTPUT_CMD $SHOW_CMD_OUTPUT_CMD_ARGS $FILE"
    $SHOW_CMD_OUTPUT_CMD $SHOW_CMD_OUTPUT_CMD_ARGS "$FILE"
    if [ "$(tail -c1 "$FILE")" != "$NEWLINE" ]; then
      log
      log_color "$UNDEREMPH" "$NO_EOF_NEWLINE_INDICATOR"
    fi
  fi
}

subtract_two_floats() {
  A="$1"
  B="$2"
  SUBTRACT_FAILURE=false
  if command -v awk 2>&1 > /dev/null; then
    if ! echo "$A" "$B" | awk '{print $1-$2}'; then
      error "awk is not working! Please redefine the subtract_two_floats function"
      SUBTRACT_FAILURE=true
    fi
  else
    error "awk is not available! Please redefine the subtract_two_floats function"
    SUBTRACT_FAILURE=true
  fi
  
  if [ "$SUBTRACT_FAILURE" = true ]; then
    echo "$A - $B"
  fi
}

FAILURE=false
FAILED_CMDS=""
FAILURES=0
SUCCESS=0
# Due to POSIX compatibility, we can't use arrays.
failedpids=""
# Wait for commands
verbose_section Waiting for commands to finish
verbose Will list successful and failed commands.
verbose
FORCE_LOG=false
if [ "$PARALLELLY_VERBOSE_OUTPUT" != true ] && [ "$PARALLELLY_SHOW_ALL_OUTPUT" = true ]; then
  FORCE_LOG=true
fi

for PID in $(echo $pids); do
  case "$PID" in
    "$SUCCESSFUL_MARKER"*) COMMAND_WAS_SUCCESSFUL=true ;;
    "$FAILED_MARKER"*) COMMAND_WAS_SUCCESSFUL=true ;;
    *) if wait "$PID"; then 
        COMMAND_WAS_SUCCESSFUL=true
      else
        COMMAND_WAS_SUCCESSFUL=false
      fi
      ;;
  esac
  if [ "$COMMAND_WAS_SUCCESSFUL" = true ]; then
    SUCCESS="$((SUCCESS + 1))"
    if [ "$SUCCESS" = 1 ]; then
      verbose_section "Successful command(s)"
    fi

    NAME="$(cat "$CMD_OUT_DIR/$PID")"
    STDERR_FILE="$CMD_OUT_DIR/$NAME.stderr"
    STDOUT_FILE="$CMD_OUT_DIR/$NAME.stdout"
    TIME="$(cat "$CMD_OUT_DIR/$NAME.time" || echo UNKNOWN)"
    COMMAND="$(cat "$CMD_OUT_DIR/$NAME.command")"
    verbose "$(emoji checkmark)Command $NAME succeeded in $TIME $(noun "$TIME" second)."
    verbose + "$COMMAND"
    verbose "$STDERR_FILE"
    verbose "$STDOUT_FILE"
    if [ "$PARALLELLY_SHOW_ALL_OUTPUT" = true ]; then
      show_output successful STDERR "$NAME" "$STDERR_FILE"
      show_output successful STDOUT "$NAME" "$STDOUT_FILE"
    fi
    verbose
  else
    FAILURE=true
    failedpids="$failedpids $PID"
  fi
done
FORCE_LOG=false

for PID in $(echo $failedpids); do
  FAILURES="$((FAILURES + 1))"
  NAME="$(cat "$CMD_OUT_DIR/$PID")"
  FAILED_CMDS="$NAME $FAILED_CMDS"

  if [ "$FAILURES" = 1 ]; then
    error_section "Failed command $(noun "$(echo "$failedpids" | wc -w)" output)"
  fi

  STDERR_FILE="$CMD_OUT_DIR/$NAME.stderr"
  STDOUT_FILE="$CMD_OUT_DIR/$NAME.stdout"
  TIME="$(cat "$CMD_OUT_DIR/$NAME.time" || echo UNKNOWN)"
  COMMAND="$(cat "$CMD_OUT_DIR/$NAME.command")"
  error "Failure in command $NAME after $TIME $(noun "$TIME" second)."
  log + "$COMMAND"
  log "$STDERR_FILE"
  log "$STDOUT_FILE"
  show_output failed STDERR "$NAME" "$STDERR_FILE"
  show_output failed STDOUT "$NAME" "$STDOUT_FILE"
  if [ "$NEWLINE_AFTER_EVERY_ERROR" = true ]; then
    log
  fi
done

TOTAL_TIME="$(subtract_two_floats "$(time_in_sec)" "$START_TIME" | format_time)"

############## Print summary and timing
verbose_section SUMMARY
verbose "$SUCCESS $(noun "$SUCCESS" command) succeeded"
log "$NUM_CMDS $(noun "$NUM_CMDS" command) finished in $TOTAL_TIME $(noun "$TOTAL_TIME" second)."
if [ "$FAILURE" = true ]; then
  error "$FAILURES $(noun "$FAILURES" command) failed: $FAILED_CMDS"
  exit "$COMMANDS_FAILED_EXIT_CODE"
fi

# End of parallelly script
